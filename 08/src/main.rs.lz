use std::process::exit;

mod lempel_ziv {
    use std::{fs::File, io::{Read, Write}};

    pub fn komprimer(filnavn: &str) -> Result<(), String> {

        // Les fil som Vec av bytes
        let mut f = match File::open(filnavn) {
            Ok(handle) => handle,
            Err(e) => {
                return Err(format!("Kunne ikke åpne filen \"{filnavn}\"\nFeilmelding: \"{e}\""));
            }
        };

        let mut data: Vec<u8> = Vec::new();

        match f.read_to_end(&mut data) {
            Ok(n) => {println!("Leste {n} bytes fra \"{filnavn}\"")}
            Err(e) => {
                return Err(format!("Kunne ikke lese fra filen \"{filnavn}\"\nFeilmelding: \"{e}\""));
            }
        }

        // Iterer gjennom filen med et vindu bakover siste 32kB
        // og se etter gjentagende mønstre

        let mut resultat: Vec<u8> = Vec::new();
        
        for (_posisjon, &byte) in data.iter().enumerate() {
            resultat.push(byte);
        }

        let mut f = match File::create(format!("{filnavn}.lz")) {
            Ok(handle) => {handle},
            Err(e) => {
                return Err(format!("Kunne ikke åpne \"{filnavn}.lz\" for å skrive\nFeilmelding: \"{e}\""));
            },
        };

        match f.write_all(resultat.as_slice()) {
            Ok(_) => {
                println!("Skrev {} bytes til {filnavn}.lz", resultat.len());
            },
            Err(e) => {
                return Err(format!("Kunne ikke skrive til \"{filnavn}.lz\"\nFeilmelding: \"{e}\""));
            },
        }

        Ok(())
    }

    fn finn_bakoverreferanse(data: &[u8]) -> (u16, u8) {
        let mut hopp = 0u16;
        let mut lengde = 0u8;


        (0, 0)
    }
}

fn main() {
    match lempel_ziv::komprimer("src/main.rs") {
        Ok(_) => {},
        Err(melding) => {
            println!("{melding}");
            exit(1);
        },
    }
}
